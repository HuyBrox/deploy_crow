import { Server } from "socket.io";
import express from "express";
import http from "http";
import mongoose from 'mongoose';
import User from '../models/user.model.js';

const app = express();
const server = http.createServer(app);

const PORT = process.env.PORT || 5000;
const io = new Server(server, {
    cors: {
        origin: `http://localhost:${PORT}`,
        methods: ["GET", "POST"],
    },
    pingInterval: 25000,
    pingTimeout: 60000,
});

// H√†m chuy·ªÉn userId th√†nh ObjectId n·∫øu c·∫ßn
const convertToObjectId = (userId) => new mongoose.Types.ObjectId(userId);

// Danh s√°ch socket c·ªßa t·ª´ng user
const userSocketMap = {};

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa user
const updateLastActiveTime = async (userId) => {
    try {
        const userObj = convertToObjectId(userId);
        await User.findByIdAndUpdate(userObj, { lastActiveAt: new Date() });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi: ", error);
    }
};

// Tr·∫£ v·ªÅ danh s√°ch socket c·ªßa user
export const getReciverSocketIds = (userId) => {
    return userSocketMap[userId] ? Array.from(userSocketMap[userId]) : [];
};

// X·ª≠ l√Ω khi user k·∫øt n·ªëi
const handleUserConnection = async (socket, userId) => {
    if (!userSocketMap[userId]) {
        userSocketMap[userId] = new Set();
    }
    userSocketMap[userId].add(socket.id);

    await updateLastActiveTime(userId);
    console.log(`üîó User k·∫øt n·ªëi: ${userId} | Socket: ${socket.id}`);

    io.emit("getOnlineUsers", Object.keys(userSocketMap));
};

// X·ª≠ l√Ω khi user ng·∫Øt k·∫øt n·ªëi
const handleUserDisconnection = async (socket, userId) => {
    if (userSocketMap[userId]) {
        userSocketMap[userId].delete(socket.id);
        if (userSocketMap[userId].size === 0) {
            delete userSocketMap[userId];
        }
    }

    await updateLastActiveTime(userId);
    console.log(`‚ùå User ng·∫Øt k·∫øt n·ªëi: ${userId} | Socket: ${socket.id}`);

    io.emit("getOnlineUsers", Object.keys(userSocketMap));
};

// X·ª≠ l√Ω tin nh·∫Øn
const handleChatMessage = (socket, { receiverId, message, senderId }) => {
    const receiverSockets = getReciverSocketIds(receiverId);
    receiverSockets.forEach(socketId => {
        io.to(socketId).emit("newMessage", { senderId, message, timestamp: new Date() });
    });
};

// X·ª≠ l√Ω ph·∫£n h·ªìi cu·ªôc g·ªçi
const handleCallResponse = (socket, { callerId, receiverId, accepted }) => {
    const callerSockets = getReciverSocketIds(callerId);
    callerSockets.forEach(socketId => {
        io.to(socketId).emit("callResponse", { receiverId, accepted });
    });

    if (accepted) {
        socket.join(`call_${callerId}_${receiverId}`);
        console.log(`üìû Ng∆∞·ªùi nh·∫≠n (${receiverId}) ƒë√£ tham gia ph√≤ng call_${callerId}_${receiverId}`);
    } else {
        console.log(`‚ùå Ng∆∞·ªùi nh·∫≠n (${receiverId}) ƒë√£ t·ª´ ch·ªëi cu·ªôc g·ªçi.`);
    }
};

// X·ª≠ l√Ω notification
const handleNotification = (socket, { receiverId, notification }) => {
    const receiverSockets = getReciverSocketIds(receiverId);
    receiverSockets.forEach(socketId => {
        io.to(socketId).emit("notification", notification);
    });
};

// X·ª≠ l√Ω k·∫øt n·ªëi Socket.IO
io.on("connection", (socket) => {
    const userId = socket.handshake.query.userId;

    if (!userId) {
        console.log("‚ö†Ô∏è K·∫øt n·ªëi t·ª´ ch·ªëi: Kh√¥ng c√≥ userId");
        socket.disconnect();
        return;
    }

    handleUserConnection(socket, userId);

    socket.on("sendMessage", (data) => handleChatMessage(socket, data));
    socket.on("respondToCall", (data) => handleCallResponse(socket, data));
    socket.on("sendNotification", (data) => handleNotification(socket, data));

    // WebRTC - g·ª≠i offer
    socket.on("sendOffer", async (data) => {
        const receiverSockets = getReciverSocketIds(data.receiverId);
        if (receiverSockets.length > 0) {
            receiverSockets.forEach(socketId => {
                io.to(socketId).emit("receiveOffer", { callerId: data.callerId, offer: data.offer });
            });
        } else {
            socket.emit("callError", { message: "Ng∆∞·ªùi nh·∫≠n kh√¥ng tr·ª±c tuy·∫øn." });
        }
    });

    // WebRTC - g·ª≠i answer
    socket.on("sendAnswer", async (data) => {
        const callerSockets = getReciverSocketIds(data.callerId);
        callerSockets.forEach(socketId => {
            io.to(socketId).emit("receiveAnswer", { receiverId: data.receiverId, answer: data.answer });
        });
    });

    // WebRTC - g·ª≠i Ice Candidate
    socket.on("sendIceCandidate", async (data) => {
        const targetSockets = getReciverSocketIds(data.targetId);
        targetSockets.forEach(socketId => {
            io.to(socketId).emit("receiveIceCandidate", { candidate: data.candidate });
        });
    });

    socket.on("disconnect", () => {
        handleUserDisconnection(socket, userId);
    });

    socket.on("error", (err) => {
        console.error(`‚ö†Ô∏è L·ªói socket: userId=${userId}, socketId=${socket.id}, l·ªói=`, err);
    });
});

export { io, server, app };
